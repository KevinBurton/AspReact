<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".txt" #>
<#@include file="$(ProjectDir)\..\Gartner.CPP.Core.Orchestrator.Interfaces\InterfaceTemplate.ttinclude" #>

<#+
	public static class ReactComponentHelper
{
		public static string GetImportStatements(InterfaceTemplate interfaceDefinition)
        {
			var sbReturn = new StringBuilder();
			if (!string.IsNullOrEmpty(interfaceDefinition.React.Imports)) 
			{ 
				sbReturn.AppendLine(interfaceDefinition.React.Imports);
				if (!string.IsNullOrEmpty(interfaceDefinition.HelpText)) 
				{ 
					sbReturn.AppendLine("const " + interfaceDefinition.LowerName + "HelpText = \"" + interfaceDefinition.HelpText + "\";");
				}
			}

			if (interfaceDefinition.React.EventEmitterListeners.Count > 0)
			{
				sbReturn.AppendLine(@"import { SetComponentDescriptorRefresh } from '../utils/eventEmitter';");
			}

			return sbReturn.ToString();
       }

		public static string GetEventEmitterFunction(InterfaceTemplate interfaceDefinition)
        {
			var sbReturn = new StringBuilder();

			if(interfaceDefinition.React.EventEmitterFunction != null) 
			{	
				sbReturn.AppendLine("function " + interfaceDefinition.React.EventEmitterFunction + "(itemId: number) {");
				sbReturn.AppendLine("var cd = {");
				sbReturn.AppendLine("name: '" + interfaceDefinition.Name + "',	");
				sbReturn.AppendLine("dataDictionary: {");
			
				var firstTimeThroughFunc = true;
				foreach(Property propDetail in interfaceDefinition.Properties)
				{	
					if(propDetail.React.DataDictionaryExclude != true) 
					{
						if(!firstTimeThroughFunc)
						{
							sbReturn.Append(",");
						}

						if(propDetail.Name == "ItemId")
						{
							sbReturn.AppendLine("ItemId: itemId,"); 
						}
						else if(propDetail.Name == "ID")
						{
							sbReturn.AppendLine("ID: '0',"); 
						}
						else
						{
							sbReturn.AppendLine(propDetail.Name + ": ''");
							firstTimeThroughFunc = false;
						}
                    }
				}
				sbReturn.AppendLine ("}}");
				sbReturn.AppendLine("return this.emitEvent('SetComponentDescriptorRefresh', [cd]);  "); 
				sbReturn.AppendLine("}");
          }
		  return sbReturn.ToString();
        }

		public static string GetDataDictionaryPopulator(InterfaceTemplate interfaceDefinition, string functionName, string parameters)
        {
			var sbReturn = new StringBuilder();

			switch(interfaceDefinition.React.ComponentType)
			{
				case "Bench": 
						foreach(Property propDetail in interfaceDefinition.Properties)
						{
							ReactPropertyFunction currentPropFunction = (ReactPropertyFunction) propDetail.React.Functions.FirstOrDefault(x => x.Name == functionName);
							if(currentPropFunction == null) continue;

							var buildLine = "this.componentDescriptor.dataDictionary['" + (string.IsNullOrEmpty(propDetail.DisplayName)?propDetail.Name:propDetail.DisplayName) + "'] = ";
							if(string.IsNullOrEmpty(currentPropFunction.Value)) {
								sbReturn.AppendLine(buildLine + "this.props." + interfaceDefinition.Name + "." + (string.IsNullOrEmpty(propDetail.DisplayName)?propDetail.Name:propDetail.DisplayName) + ".Value;");
                            }
							else
                            {
								sbReturn.AppendLine(buildLine + currentPropFunction.Value + ";");
                            }
						}
						
						break;
				case "SimpleText": 
					if (!string.IsNullOrEmpty(parameters) )
                    {
						sbReturn.AppendLine("this.componentDescriptor.dataDictionary[" + parameters + ".target.id] = " + parameters + ".target.value;");
                    }
					else
                    {
						sbReturn.AppendLine("this.componentDescriptor.dataDictionary = {");
						
						var firstTimeThrough = true;
						foreach(Property propDetail in interfaceDefinition.Properties)
						{
							ReactPropertyFunction currentPropFunction = (ReactPropertyFunction) propDetail.React.Functions.FirstOrDefault(x => x.Name == functionName);
							if(currentPropFunction == null) continue;

							if(!firstTimeThrough)
							{
								sbReturn.Append(",");
							}
							sbReturn.AppendLine((string.IsNullOrEmpty(propDetail.DisplayName)?propDetail.Name:propDetail.DisplayName) + ": this.props." + interfaceDefinition.Name + "." + (string.IsNullOrEmpty(propDetail.DisplayName)?propDetail.Name:propDetail.DisplayName) + ".Value");
							firstTimeThrough = false;
						}
						sbReturn.AppendLine("}");

						if(firstTimeThrough) sbReturn.Clear(); //if firstTimeThrough is still true at this point, then no properties were included for this function.
                    }
					break;
            }    

			return sbReturn.ToString();
		}
}

#>