<div id="SpeakerBench">
  <div className="form-group">
    <Label id="Speaker_Label" text="SPEAKER(S)  " required={this.props.SpeakerBench[0].ID.IsRequired} />
    <div>
      <EmployeePicker id={"addSpeakersEmployeePicker"}
                             buttonText="Add"
                             onSelect={(employee) => this.upsertChange(employee) }
        isEnabled={this.props.SpeakerBench[0].EmployeeId.IsEnabled}/>
      </div>

    <div className="table-responsive">
      <table className="table table-condensed">
        <tbody>
          {SpeakerBench[0].ID.Value != '' && SpeakerBench[0].ID.Value != '0' ?

          SpeakerBench.sort((a, b) => {
          var nameA = a.FullName.Value.toUpperCase();
          var nameB = b.FullName.Value.toUpperCase();
          if (nameA < nameB) {
                                            return -1;
                                        } else if (nameA > nameB) {
                                            return 1;
                                        } else {
                                            return 0;
                                        }
                                    })
                                .map((Speaker: any) => (
                                    <tr  key={Speaker.ID.Value}>
            <td  className="text-middle" >
              {Speaker.FullName.Value} ({Speaker.EmployeeId.Value})
            </td>
            <td className="text-middle">
              <button type="button"
                  className="btn btn-xs btn-custom delete-button"
                  onClick={() => this.deleteSelected(Speaker) }
                disabled={!this.props.SpeakerBench[0].EmployeeId.IsEnabled}>
                <span className="icon-trash">
                </span>
              </button>
            </td>
          </tr>
          )
          )
          : <tr></tr>
          }
        </tbody>
      </table>
    </div>
  </div>
</div>
