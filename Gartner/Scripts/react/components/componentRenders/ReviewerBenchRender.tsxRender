<div id="ReviewerBench">
  <div className="form-group">
    <Label id="Reviewer_Label" text="REVIEWER(S)  " required={this.props.ReviewerBench[0].ID.IsRequired} />
    <div>
      <EmployeePicker id={"addReviewerEmployeePicker"}
          buttonText="Add"
          onSelect={(employee) =>this.upsertChange(employee) }
        isEnabled={this.props.ReviewerBench[0].EmployeeId.IsEnabled}/>
      </div>

    <div className="table-responsive">
      <table className="table table-condensed">
        <tbody>
          {ReviewerBench[0].ID.Value != '0' ?
          ReviewerBench.sort((a, b) => {
          var nameA = a.FullName.Value.toUpperCase();
          var nameB = b.FullName.Value.toUpperCase();
          if (nameA < nameB) {
                                                    return -1;
                                                } else if (nameA > nameB) {
                                                    return 1;
                                                } else {
                                                    return 0;
                                                }
                                            })
                                                .filter((Reviewer) => { return Reviewer.ItemReviewerTypeId.Value == '2'; })
                                                .map((Reviewer: any) => (
                                                    <tr  key={Reviewer.ID.Value}>
            <td  className="text-middle" >
              {Reviewer.FullName.Value} ({Reviewer.Description.Value}) {Reviewer.VendorName.Value}
            </td>
            <td  className="text-middle" >             
                {Reviewer.DelegateNames.Value != '' ?
                this.getDelegates(Reviewer).map((delString) => (
                <tr  key={delString.Name}>
                  <td  className="text-middle" >
                    {delString.Email != '' ?
                    <a href={getLink(delString.Email, this.props.itemId) }> {delString.Name} </a>
                    : <div></div>}
                  </td>
                </tr>
                ))
                : <div></div>}           
            </td>
          </tr>
          )
          )
          : <tr></tr>
          }
        </tbody>
      </table>
    </div>


    <div className="table-responsive">
      <table className="table table-condensed">
        <tbody>

          {ReviewerBench[0].ID.Value != '0' ?

          ReviewerBench.sort((a, b) => {
          var nameA = a.FullName.Value.toUpperCase();
          var nameB = b.FullName.Value.toUpperCase();
          if (nameA < nameB) {
                                                    return -1;
                                                } else if (nameA > nameB) {
                                                    return 1;
                                                } else {
                                                    return 0;
                                                }
                                            })
                                                .filter((Reviewer) => { return Reviewer.ItemReviewerTypeId.Value == '1' && Reviewer.ReviewStatus.Value == 'N'; })
          .map((Reviewer: any) => (
          <tr  key={Reviewer.ID.Value}>
            <td  className="text-middle" >
              {Reviewer.FullName.Value} ({Reviewer.Description.Value})
            </td>
            {Reviewer.ActionButton.DefaultValue == 'Peer Review' ?
            <td className="text-middle">

              <button type="button"
                  className="btn btn-xs btn-fade"
                  onClick={() =>this.toggleReviewComplete(Reviewer) }
                disabled={!Reviewer.ActionButton.IsEnabled}> Click to Complete
              </button>

              <button type="button"
                  className="btn btn-xs btn-custom delete-button"
                  onClick={() =>this.deleteSelected(Reviewer) }
                disabled={false}>
                <span className="icon-trash">
                </span>
              </button>
            </td>
            :
            <td></td>}
          </tr>
          )
          )
          : <tr></tr>
          }
        </tbody>
      </table>
      <div className="table-responsive">
        <table className="table table-condensed">
          <tbody>

            {ReviewerBench[0].ID.Value != '' ?

            ReviewerBench.sort((a, b) => {
            var nameA = a.FullName.Value.toUpperCase();
            var nameB = b.FullName.Value.toUpperCase();
            if (nameA < nameB) {
                                                        return -1;
                                                    } else if (nameA > nameB) {
                                                        return 1;
                                                    } else {
                                                        return 0;
                                                    }
                                                })
                                                    .filter((Reviewer) => { return Reviewer.ItemReviewerTypeId.Value == '1' && Reviewer.ReviewStatus.Value == 'Y'; })
            .map((Reviewer: any) => (
            <tr  key={Reviewer.ID.Value}>
              <td className="text-middle">
                {Reviewer.FullName.Value} ({Reviewer.Description.Value})
              </td>
              {Reviewer.ActionButton.DefaultValue == 'Peer Review' ?
              <td className="text-middle">
                <button type="button"
                    className="btn btn-xs btn-custom btn-secondary"
                    onClick={() =>this.toggleReviewComplete(Reviewer) }
                  disabled={!Reviewer.ActionButton.IsEnabled}> Completed
                </button>

                <button type="button"
                    className="btn btn-xs btn-custom delete-button"
                    onClick={() =>this.deleteSelected(Reviewer) }
                  disabled={false}>
                  <span className="icon-trash">
                  </span>
                </button>
              </td>
              :
              <td></td>}
            </tr>
            )
            )
            : <tr></tr>
            }
          </tbody>
        </table>
      </div>
    </div>
  </div>
</div>
